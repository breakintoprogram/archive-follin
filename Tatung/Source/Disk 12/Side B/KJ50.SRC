                ;**************************************                ; Z80 AY MUSIC DRIVER; LAST UPDATE - 03/07/1989.                ;**************************************                                                ORG 40000                LOAD 0C000H                ;======================================;STACK DEPTHS                SD:             EQU 3                ;======================================                ASCII:          EQU 23560                TESTER:         PUSH AF                PUSH BC                PUSH DE                PUSH HL                                XOR A                LD (ASCII),A                LD (MINS),A                LD (SECS),A                                                CALL TUNEOFF                CALL STACKMESS                                DB CLS                DB AT,0,0                DB INK,01001110B                DB "'AY' MUSIC DRIVE"                DB "R V2  BY S.RUDDY"                DB INK,01001110B; Music name                DB "- - - - - - - GU"                DB "NS - - - - - - -"                DB INK,64+6,AT,0,3                DB "DRIVER 0000:DATA"                DB " 0000:TOTAL=0000"                DB INK,64+2                DB "EFFECT 00:TUNE 0"                DB "0:TIME 00:00    "                DB INK,64+8+7                DB AT,0,6                DB "            CH.A"                DB "  CH.B  CH.C    "                DB AT,0,7                DB INK,64+2                DB "NOTE            "                DB "                "                DB INK,64+2; DB   "LENGTH          "; DB   "                "                DS 32,32                DB INK,64+3                DB "COUNT           "                DB "                "                DB INK,64+3                DB "TRANS           "                DB "                "                DB INK,64+4; DB   "FOR             "; DB   "                "                DS 32,32                DB INK,64+4                DB "NEXT            "                DB "                "                DB INK,64+5                DB "FREQ            "                DB "                "                DB INK,64+5                DB "DIST            "                DB "                "                DB INK,64+6                DB "WOB-SET         "                DB "                "                DB INK,64+6                DB "WOB-VAR         "                DB "                "                DB INK,64+4                DB "VIB-DEL         "                DB "                "                DB INK,64+4                DB "VIB-RAT         "                DB "                "                DB INK,64+2                DB "VIB-LIM         "                DB "                "                DB INK,64+2                DB "VIB-DIR         "                DB "                "                DB INK,64+5                DB "SET-LEN         "                DB "                "                DB INK,64+5                DB "VOLUME          "                DB "                "                DB 255                                LD HL,CALC1                PUSH HL                LD A,H                LD DE,4067H                CALL HEX                POP HL                LD A,L                LD DE,4069H                CALL HEX                                LD HL,(CALC2)                PUSH HL                LD A,H                LD DE,4071H                CALL HEX                POP HL                LD A,L                LD DE,4073H                CALL HEX                                LD HL,CALC1                LD DE,(CALC2)                ADD HL,DE                PUSH HL                LD A,H                LD DE,407CH                CALL HEX                POP HL                LD A,L                LD DE,407EH                CALL HEX                LOOP:                           HALT                 ;         LD   BC,1600;BOF       DEC  BC;         LD   A,B;         OR   C;         JP   NZ,BOF                                CALL UPDATE                LD A,2                OUT (254),A                CALL REFRESH                XOR A                OUT (254),A                CALL CLOCK                CALL KEYSCAN                LD A,07FH                IN A,(254)                AND 1                JP NZ,LOOP                LD BC,65533                LD A,7                OUT (C),A                LD BC,49149                LD A,63                OUT (C),A                                POP HL                POP DE                POP BC                POP AF                RET                KEYSCAN:        LD A,(ASCII)                OR A                RET ZKEYSCAN1:       CP 32                JR NC,KEYSCAN2                CP 8                JP Z,KEYwait                CP 9                JP Z,KEYfast                CP 13                JR NZ,GOout                CALL TUNEOFF                LD A,6                OUT (254),A                JR GOoutKEYSCAN2:       CP 48                JR C,GOout                CP 58                JR NC,DOeffect                AND 15                LD E,A                LD A,(Tunes)                CP E                JR Z,GOout                JR C,GOout                LD A,E                PUSH AF                LD DE,408FH                CALL HEX                POP AF                CALL TUNE                LD HL,0                LD (MINS),HL                JR GOoutDOeffect:       CP 61H                JR C,GOout                CP 61H+26                JR NC,GOout                SUB 061H                LD E,A                LD A,(Effects)                CP E                JR Z,GOout                JR C,GOout                LD A,E                PUSH AF                LD DE,4087H                CALL HEX                POP AF                CALL FXGOout:          XOR A                LD (ASCII),A                RET                KEYwait:        LD HL,ASCII                LD (HL),0                LD B,4KEYloop:        HALT                 DJNZ KEYloop                RET                KEYfast:        LD B,50KEYloop2:       PUSH BC                CALL REFRESH                CALL CLOCK                POP BC                DJNZ KEYloop2                JR GOout                ;--------------------------------------HEX:            INC DE                PUSH AF                CALL ONEnib                POP AF                RRA                RRA                RRA                RRA                DEC DEONEnib:         AND 15                ADD A                LD C,A                LD B,0                LD HL,ROM_TAB                ADD HL,BC                LD A,(HL)                INC HL                LD H,(HL)                LD L,AMIKESbug:       LD C,D                LD B,8PRloop:         LD A,(HL)                LD (DE),A                INC HL                INC D                DJNZ PRloop                LD D,C                RET                ROM_TAB:        DW 3D80H                DW 3D88H                DW 3D90H                DW 3D98H                DW 3DA0H                DW 3DA8H                DW 3DB0H                DW 3DB8H                DW 3DC0H                DW 3DC8H                DW 3E08H                DW 3E10H                DW 3E18H                DW 3E20H                DW 3E28H                DW 3E30H                AT:             EQU 22INK:            EQU 16CLS:            EQU 15                STACKMESS:      POP IX                CALL MESS                JP (IX)                MESS:           LD A,(IX+0)                INC IX                OR A                RET M                CP 32                JR C,Mcontrol                CALL Mgetchar                CALL Mgetaddr                CALL MIKESbug                CALL PRattr                CALL INCcursor                JR MESS                Mcontrol:       LD HL,MESS                PUSH HL                CP 15                JR Z,Mcls                CP 22                JP Z,Mat                CP 16                JR Z,Mink                RET                Mcolour:        DB 0McursorX:       DB 0McursorY:       DB 0                Mink:           LD A,(IX+0)                INC IX                LD (Mcolour),A                RET                Mcls:           LD HL,4000H                LD (HL),L                LD DE,4001H                LD BC,1AFFH                LDIR                 LD (McursorX),BC                RET                INCcursor:      LD HL,McursorX                LD A,(HL)                INC A                AND 31                LD (HL),A                RET NZ                INC HL                INC (HL)                RET                Mgetchar:       LD L,A                LD H,0                ADD HL,HL                ADD HL,HL                ADD HL,HL                LD BC,3C00H                ADD HL,BC                RET                FIFTY:          DB 50MINS:           DB 0SECS:           DB 0                CLOCK:          LD HL,FIFTY                DEC (HL)                RET NZ                LD A,50                LD (HL),A                LD A,(SECS)                INC A                LD E,A                AND 15                CP 10                JR C,CLOCK_OK                LD A,(SECS)                AND 0F0H                ADD 16                CP 60H                JR NZ,COK                INC HL                INC (HL)                LD A,(HL)                AND 15                CP 10                JR C,NOincy                LD A,(HL)                AND 240                ADD 16                LD (HL),ANOincy:         LD E,0CLOCK_OK:       LD A,ECOK:            LD (SECS),A                LD DE,409AH                CALL HEX                LD A,(MINS)                LD DE,4097H                JP HEX                UPDATE:         LD A,(OLDNOTE_A)                LD DE,40EEH                CALL HEX                LD A,(OLDNOTE_B)                LD DE,40F4H                CALL HEX                LD A,(OLDNOTE_C)                LD DE,40FAH                CALL HEX                                LD A,(COUNT_A)                LD DE,482EH                CALL HEX                LD A,(COUNT_B)                LD DE,4834H                CALL HEX                LD A,(COUNT_C)                LD DE,483AH                CALL HEX                                LD A,(TRANS_A)                LD DE,484EH                CALL HEX                LD A,(TRANS_B)                LD DE,4854H                CALL HEX                LD A,(TRANS_C)                LD DE,485AH                CALL HEX                                LD A,(REPEAT_A)                LD DE,488EH                CALL HEX                LD A,(REPEAT_B)                LD DE,4894H                CALL HEX                LD A,(REPEAT_C)                LD DE,489AH                CALL HEX                                LD A,(FREQ_A+1)                LD DE,48ACH                CALL HEX                LD A,(FREQ_B+1)                LD DE,48B2H                CALL HEX                LD A,(FREQ_C+1)                LD DE,48B8H                CALL HEX                LD A,(FREQ_A)                LD DE,48AEH                CALL HEX                LD A,(FREQ_B)                LD DE,48B4H                CALL HEX                LD A,(FREQ_C)                LD DE,48BAH                CALL HEX                                LD A,(DISTORT_A)                LD DE,48CEH                CALL HEX                LD A,(DISTORT_B)                LD DE,48D4H                CALL HEX                LD A,(DISTORT_C)                LD DE,48DAH                CALL HEX                                LD A,(W_DEL1_A)                LD DE,48EEH                CALL HEX                LD A,(W_DEL1_B)                LD DE,48F4H                CALL HEX                LD A,(W_DEL1_C)                LD DE,48FAH                CALL HEX                                LD A,(W_OFF_A)                LD DE,500EH                CALL HEX                LD A,(W_OFF_B)                LD DE,5014H                CALL HEX                LD A,(W_OFF_C)                LD DE,501AH                CALL HEX                                LD A,(V_DEL_A)                LD DE,502EH                CALL HEX                LD A,(V_DEL_B)                LD DE,5034H                CALL HEX                LD A,(V_DEL_C)                LD DE,503AH                CALL HEX                                LD A,(V_RATE_A)                LD DE,504EH                CALL HEX                LD A,(V_RATE_B)                LD DE,5054H                CALL HEX                LD A,(V_RATE_C)                LD DE,505AH                CALL HEX                                LD A,(V_LIM2_A)                LD DE,506EH                CALL HEX                LD A,(V_LIM2_B)                LD DE,5074H                CALL HEX                LD A,(V_LIM2_C)                LD DE,507AH                CALL HEX                                LD A,(V_DIR_A)                LD DE,508EH                CALL HEX                LD A,(V_DIR_B)                LD DE,5094H                CALL HEX                LD A,(V_DIR_C)                LD DE,509AH                CALL HEX                                LD A,(LENGTH_A)                LD DE,50AEH                CALL HEX                LD A,(LENGTH_B)                LD DE,50B4H                CALL HEX                LD A,(LENGTH_C)                LD DE,50BAH                CALL HEX                                LD A,(VOLUME_A)                LD DE,50CEH                CALL HEX                LD A,(VOLUME_B)                LD DE,50D4H                CALL HEX                LD A,(VOLUME_C)                LD DE,50DAH                CALL HEX                                RET                Mgetaddr:       LD A,(McursorY)                AND 18H                OR 40H                LD D,A                LD A,(McursorY)                RRCA                 RRCA                 RRCA                 AND 0E0H                LD E,A                LD A,(McursorX)                ADD E                LD E,A                RET                Mat:            LD A,(IX+0)                LD (McursorX),A                INC IX                LD A,(IX+0)                LD (McursorY),A                INC IX                RET                PRattr:         LD A,D                RRA                RRA                RRA                AND 3                OR 58H                LD D,A                LD A,(Mcolour)                LD (DE),A                RET;======================================; AY MUSIC DRIVER V1.00 BY S.RUDDY                CODE_TOP:                       PC_A:           DW 0PC_B:           DW 0PC_C:           DW 0                LOOP_A:         DW 0LOOP_B:         DW 0LOOP_C:         DW 0                FREQ_A:         DW 0FREQ_B:         DW 0FREQ_C:         DW 0                STOP_A:         DB 0STOP_B:         DB 0STOP_C:         DB 0                TRANS_A:        DB 0TRANS_B:        DB 0TRANS_C:        DB 0                LENGTH_A:       DB 0LENGTH_B:       DB 0LENGTH_C:       DB 0                IGNORE_A:       DB 0IGNORE_B:       DB 0IGNORE_C:       DB 0                W_WAIT_A:       DB 0W_WAIT_B:       DB 0W_WAIT_C:       DB 0                W_DEL1_A:       DB 0W_DEL1_B:       DB 0W_DEL1_C:       DB 0                W_DEL2_A:       DB 0W_DEL2_B:       DB 0W_DEL2_C:       DB 0                PORT_A:         DB 0PORT_B:         DB 0PORT_C:         DB 0                V_DEL_A:        DB 0V_DEL_B:        DB 0V_DEL_C:        DB 0                E_TIME_A:       DB 0E_TIME_B:       DB 0E_TIME_C:       DB 0                REPEAT_A:       DB 0REPEAT_B:       DB 0REPEAT_C:       DB 0                DISTORT_A:      DB 0DISTORT_B:      DB 0DISTORT_C:      DB 0                COUNT_A:        DB 0COUNT_B:        DB 0COUNT_C:        DB 0                OLDFREQ_A:      DB 0OLDFREQ_B:      DB 0OLDFREQ_C:      DB 0                A_CONT_A:       DB 0A_CONT_B:       DB 0A_CONT_C:       DB 0                VOLUME_A:       DB 0VOLUME_B:       DB 0VOLUME_C:       DB 0                FLIP1_A:        DB 0FLIP1_B:        DB 0FLIP1_C:        DB 0                OLDNOTE_A:      DB 0OLDNOTE_B:      DB 0OLDNOTE_C:      DB 0                A_INIT_A:       DB 0A_INIT_B:       DB 0A_INIT_C:       DB 0                A_ATT_A:        DB 0A_DEC_A:        DB 0A_ATT_B:        DB 0A_DEC_B:        DB 0A_ATT_C:        DB 0A_DEC_C:        DB 0                A_SUS_A:        DB 0A_SUS_B:        DB 0A_SUS_C:        DB 0                A_CYC_A:        DB 0A_CYC_B:        DB 0A_CYC_C:        DB 0                A_STAGE_A:      DB 0A_STAGE_B:      DB 0A_STAGE_C:      DB 0                A_TIME_A:       DB 0A_TIME_B:       DB 0A_TIME_C:       DB 0                W_OFF_A:        DB 0W_OFF_B:        DB 0W_OFF_C:        DB 0                TARGET_A:       DB 0TARGET_B:       DB 0TARGET_C:       DB 0                V_DEL1_A:       DB 0V_DEL1_B:       DB 0V_DEL1_C:       DB 0                V_RATE_A:       DB 0V_RATE_B:       DB 0V_RATE_C:       DB 0                V_LIM1_A:       DB 0V_LIM1_B:       DB 0V_LIM1_C:       DB 0                V_LIM2_A:       DB 0V_LIM2_B:       DB 0V_LIM2_C:       DB 0                V_DIR_A:        DB 0V_DIR_B:        DB 0V_DIR_C:        DB 0                E_FREQ_A:       DW 0E_FREQ_B:       DW 0E_FREQ_C:       DW 0                E_WAIT_A:       DB 0E_WAIT_B:       DB 0E_WAIT_C:       DB 0                E_BITS_A:       DB 0E_BITS_B:       DB 0E_BITS_C:       DB 0                FLESH_A:        DB 0FLESH_B:        DB 0FLESH_C:        DB 0                MEMGATE_A:      DB 0MEMGATE_B:      DB 0MEMGATE_C:      DB 0                ENDIT_A:        DB 0ENDIT_B:        DB 0ENDIT_C:        DB 0                GATE_A:         DB 0GATE_B:         DB 0GATE_C:         DB 0                GATERES_A:      DB 0GATERES_B:      DB 0GATERES_C:      DB 0                ;--------------------------------------                ; tune initialisation enter with; a = tune number.                TUNE:                           ADD A                LD C,A                LD B,0                LD HL,TUNES_A                ADD HL,BC                LD E,(HL)                INC HL                LD D,(HL)                LD (PC_A),DE                                LD HL,TUNES_B                ADD HL,BC                LD E,(HL)                INC HL                LD D,(HL)                LD (PC_B),DE                                LD HL,TUNES_C                ADD HL,BC                LD E,(HL)                INC HL                LD D,(HL)                LD (PC_C),DE                                                LD A,0FFH                                LD (STOP_A),A                LD (STOP_B),A                LD (STOP_C),A                                                TUNE_IN:                        LD (OLDFREQ_A),A                LD (OLDFREQ_B),A                LD (OLDFREQ_C),A                                LD HL,TRANS_A                LD DE,TRANS_A+1                LD BC,37                LD (HL),0                LDIR                                 LD A,1                LD (COUNT_A),A                LD (COUNT_B),A                LD (COUNT_C),A                                LD A,00001001B                LD (FLESH_A),A                SLA A                LD (FLESH_B),A                SLA A                LD (FLESH_C),A                                LD HL,STACK_A                LD (SP_A),HL                LD HL,STACK_B                LD (SP_B),HL                LD HL,STACK_C                LD (SP_C),HL                                RET                ;--------------------------------------; call before initialising sound fx                                TUNEOFF:                        LD C,0                LD A,8                CALL OUT_CA_AY                LD C,0                LD A,9                CALL OUT_CA_AY                LD C,0                LD A,10                CALL OUT_CA_AY                                XOR A                LD (STOP_A),A                LD (STOP_B),A                LD (STOP_C),A                DEC A                                JP TUNE_IN                ;--------------------------------------; do fx. enter with a = fx number                                FX:                             ADD A                LD HL,FX_TAB                CALL ADDHLA                LD A,(HL)                INC HL                LD H,(HL)                LD L,A                FLOOP:                          EX DE,HL                LD A,(DE)                OR A                RET M; RRA                SRL A                LD HL,STOP_A                CALL ADDHLA                LD (HL),255                LD HL,COUNT_A                LD A,(DE)                SRL A                CALL ADDHLA                LD (HL),1                                LD A,(DE)                LD HL,PC_A                CALL ADDHLA                INC DE                EX DE,HL                LDI                LDI                JR FLOOP                ADDHLA:                         ADD L                LD L,A                RET NC                INC H                RET                ;--------------------------------------; Main routine, call once per frame                REFRESH:        CHANNEL_A:      LD A,(STOP_A)                OR A                JP P,CHANNEL_BTSTCNT_A:       LD HL,COUNT_A                DEC (HL)                PUSH AF           ;*                LD A,(ENDIT_A)  ;*                CP (HL)         ;*                LD HL,GATE_A    ;*                JR Z,NOGATE_A   ;*                LD A,(HL)       ;*                OR A            ;*                JP NZ,NOTYET_A  ;*NOGATE_A:       LD A,00001001B                LD (FLESH_A),A  ;*                CALL OUT_FLESH    ;*                INC (HL)         ;*NOTYET_A:       DEC (HL)         ;*                POP AF           ;*                JP NZ,START_A                LD BC,(PC_A)DO_A:           LD A,(BC)                INC BC                OR A                JP P,GOTNOTE_ACOMMAND_A:      AND 127                ADD A                LD E,A                LD D,0                LD HL,JUMP_A                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                EX DE,HL                JP (HL)GOTNOTE_A:      LD L,A                LD A,(IGNORE_A)                OR A                JP Z,NOTEOK_A                XOR A                LD (IGNORE_A),A                JP NOTRANS_ANOTEOK_A:       LD A,(TRANS_A)NOTRANS_A:      ADD L                LD L,A                LD A,(PORT_A)                OR A                LD A,L                JP Z,NOPORT_A                LD (TARGET_A),A                LD A,(OLDNOTE_A)NOPORT_A:       LD (OLDNOTE_A),A                ADD A                PUSH BC                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_A)                LD H,0                ADD HL,DE                LD (FREQ_A),HL                LD C,L                XOR A                CALL OUT_CA_AY                LD C,H                LD A,1                CALL OUT_CA_AY                POP BC                LD A,(LENGTH_A)                OR A                JP NZ,GOTLEN_A                LD A,(BC)                INC BCGOTLEN_A:       LD (COUNT_A),A                LD (PC_A),BC                LD A,(W_DEL1_A)                LD (W_WAIT_A),A                                LD A,(GATERES_A)                LD (GATE_A),A                LD A,(MEMGATE_A)                LD (FLESH_A),A                CALL OUT_FLESH                STARTVIBA:      LD A,(V_DEL_A)                OR A                JP Z,SETFLIP_A                LD (V_DEL1_A),A                LD A,(V_LIM2_A)                LD (V_LIM1_A),A                LD A,(V_DIR_A)SETFLIP_A:      LD (FLIP1_A),ASTARTENVA:      LD A,(A_CONT_A)                OR A                JP Z,STARTEFFA                LD A,(A_CYC_A)                LD (A_STAGE_A),A                OR A                LD A,(A_ATT_A)                JP Z,STARTAT_A                LD A,(A_DEC_A)STARTAT_A:      LD (A_TIME_A),A                LD A,(A_INIT_A)                LD (VOLUME_A),ASTARTEFFA:      LD A,(E_TIME_A)                OR A                JP Z,START_A                LD (E_WAIT_A),A                LD A,(E_BITS_A)                LD (FLESH_A),A                CALL OUT_FLESH                LD A,(E_FREQ_A)                LD C,A                XOR A                CALL OUT_CA_AY                LD A,(E_FREQ_A+1)                LD C,A                LD A,1                CALL OUT_CA_AY                START_A:        LD A,(A_STAGE_A)                OR A                JP NZ,TESTDEC_A                LD HL,A_TIME_A                DEC (HL)                JP P,ENDADSR_A                LD A,(A_ATT_A)                LD (HL),A                LD HL,VOLUME_A                INC (HL)                LD A,(HL)                CP 15                JP NZ,ENDADSR_A                LD A,1                LD (A_STAGE_A),A                LD A,(A_DEC_A)                LD (A_TIME_A),A                JP ENDADSR_ATESTDEC_A:      CP 1                JP NZ,ENDADSR_A                LD HL,A_TIME_A                DEC (HL)                JP P,ENDADSR_A                LD A,(A_DEC_A)                LD (HL),A                LD A,(VOLUME_A)                LD HL,A_SUS_A                CP (HL)                JP Z,SET_SUS_A                DEC A                LD (VOLUME_A),A                JP P,ENDADSR_ASET_SUS_A:      LD A,2                LD (A_STAGE_A),AENDADSR_A:      LD A,(VOLUME_A)                LD C,A                LD A,8                CALL OUT_CA_AYTESTEFF_A:      LD A,(E_TIME_A)                OR A                JP Z,TESTVIB_A                LD A,(E_WAIT_A)                OR A                JP Z,TESTVIB_A                DEC A                LD (E_WAIT_A),A                JP NZ,CHANNEL_B                LD A,(FREQ_A)                LD C,A                XOR A                CALL OUT_CA_AY                LD A,(FREQ_A+1)                LD C,A                LD A,1                CALL OUT_CA_AY                LD A,(MEMGATE_A)                LD (FLESH_A),A                CALL OUT_FLESHTESTVIB_A:      LD A,(V_DEL_A)                OR A                JP Z,TSTWOB_A                LD A,(V_DEL1_A)                OR A                JP Z,VSTART_A                DEC A                LD (V_DEL1_A),A                JP NZ,TSTWOB_AVSTART_A:       LD HL,(FREQ_A)                LD DE,(V_RATE_A)                LD D,0                LD A,(FLIP1_A)                OR A                JP Z,VIBDOWN_AVIBUP_A:        ADD HL,DE                JP VIBDONE_AVIBDOWN_A:      SBC HL,DEVIBDONE_A:      LD (FREQ_A),HL                LD C,L                XOR A                CALL OUT_CA_AY                LD C,H                LD A,1                CALL OUT_CA_AYVIBCNT_A:       LD HL,V_LIM1_A                DEC (HL)                JP NZ,TSTPORT_A                LD A,(V_LIM2_A)                OR A                JP Z,TSTPORT_A                ADD A                LD (HL),A                LD A,(FLIP1_A)                CPL                LD (FLIP1_A),A                JP TSTPORT_ATSTWOB_A:       LD A,(W_WAIT_A)                OR A                JP Z,TSTPORT_A                DEC A                LD (W_WAIT_A),A                JP NZ,TSTPORT_A                LD A,(W_DEL1_A)                LD (W_WAIT_A),A                LD A,(W_OFF_A)                LD L,A                LD A,(FLIP1_A)                XOR 255                LD (FLIP1_A),A                LD A,(OLDNOTE_A)                JP Z,WOBDOWN_AWOBUP_A:        ADD L                JP RESOUND_AWOBDOWN_A:      SUB L                PUSH AF                LD A,(W_DEL2_A)                LD (W_WAIT_A),A                POP AF                JP RESOUND_ATSTPORT_A:      LD A,(PORT_A)                OR A                JP Z,CHANNEL_B                LD HL,TARGET_A                LD E,A                LD A,(OLDNOTE_A)                CP (HL)                JP Z,CHANNEL_B                JP C,GO_UP_A                SUB E                CP (HL)                JP NC,RESOUND_A                JP GOTHERE_AGO_UP_A:        ADD E                CP (HL)                JP C,RESOUND_AGOTHERE_A:      LD A,(HL)RESOUND_A:      LD (OLDNOTE_A),A                ADD A                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_A)                LD H,0                ADD HL,DE                LD (FREQ_A),HL                LD C,L                XOR A                CALL OUT_CA_AY                LD C,H                LD A,1                CALL OUT_CA_AY                CHANNEL_B:      LD A,(STOP_B)                OR A                JP P,CHANNEL_CTSTCNT_B:       LD HL,COUNT_B                DEC (HL)                PUSH AF           ;*                LD A,(ENDIT_B)  ;*                CP (HL)         ;*                LD HL,GATE_B    ;*                JR Z,NOGATE_B   ;*                LD A,(HL)       ;*                OR A            ;*                JP NZ,NOTYET_B  ;*NOGATE_B:       LD A,00010010B                LD (FLESH_B),A                CALL OUT_FLESH                INC (HL)         ;*NOTYET_B:       DEC (HL)         ;*                POP AF           ;*                JP NZ,START_B                LD BC,(PC_B)DO_B:           LD A,(BC)                INC BC                OR A                JP P,GOTNOTE_BCOMMAND_B:      AND 127                ADD A                LD E,A                LD D,0                LD HL,JUMP_B                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                EX DE,HL                JP (HL)GOTNOTE_B:      LD L,A                LD A,(IGNORE_B)                OR A                JP Z,NOTEOK_B                XOR A                LD (IGNORE_B),A                JP NOTRANS_BNOTEOK_B:       LD A,(TRANS_B)NOTRANS_B:      ADD L                LD L,A                LD A,(PORT_B)                OR A                LD A,L                JP Z,NOPORT_B                LD (TARGET_B),A                LD A,(OLDNOTE_B)NOPORT_B:       LD (OLDNOTE_B),A                ADD A                PUSH BC                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_B)                LD H,0                ADD HL,DE                LD (FREQ_B),HL                LD C,L                LD A,2                CALL OUT_CA_AY                LD C,H                LD A,3                CALL OUT_CA_AY                POP BC                LD A,(LENGTH_B)                OR A                JP NZ,GOTLEN_B                LD A,(BC)                INC BCGOTLEN_B:       LD (COUNT_B),A                LD (PC_B),BC                LD A,(W_DEL1_B)                LD (W_WAIT_B),A                                LD A,(GATERES_B);*                LD (GATE_B),A   ;*                LD A,(MEMGATE_B)                LD (FLESH_B),A                CALL OUT_FLESH                STARTVIBB:      LD A,(V_DEL_B)                OR A                JP Z,SETFLIP_B                LD (V_DEL1_B),A                LD A,(V_LIM2_B)                LD (V_LIM1_B),A                LD A,(V_DIR_B)SETFLIP_B:      LD (FLIP1_B),ASTARTENVB:      LD A,(A_CONT_B)                OR A                JP Z,STARTEFFB                LD A,(A_CYC_B)                LD (A_STAGE_B),A                OR A                LD A,(A_ATT_B)                JP Z,STARTAT_B                LD A,(A_DEC_B)STARTAT_B:      LD (A_TIME_B),A                LD A,(A_INIT_B)                LD (VOLUME_B),ASTARTEFFB:      LD A,(E_TIME_B)                OR A                JP Z,START_B                LD (E_WAIT_B),A                LD A,(E_BITS_B)                LD (FLESH_B),A                CALL OUT_FLESH                LD A,(E_FREQ_B)                LD C,A                LD A,2                CALL OUT_CA_AY                LD A,(E_FREQ_B+1)                LD C,A                LD A,3                CALL OUT_CA_AY                START_B:        LD A,(A_STAGE_B)                OR A                JP NZ,TESTDEC_B                LD HL,A_TIME_B                DEC (HL)                JP P,ENDADSR_B                LD A,(A_ATT_B)                LD (HL),A                LD HL,VOLUME_B                INC (HL)                LD A,(HL)                CP 15                JP NZ,ENDADSR_B                LD A,1                LD (A_STAGE_B),A                LD A,(A_DEC_B)                LD (A_TIME_B),A                JP ENDADSR_BTESTDEC_B:      CP 1                JP NZ,ENDADSR_B                LD HL,A_TIME_B                DEC (HL)                JP P,ENDADSR_B                LD A,(A_DEC_B)                LD (HL),A                LD A,(VOLUME_B)                LD HL,A_SUS_B                CP (HL)                JP Z,SET_SUS_B                DEC A                LD (VOLUME_B),A                JP P,ENDADSR_BSET_SUS_B:      LD A,2                LD (A_STAGE_B),AENDADSR_B:      LD A,(VOLUME_B)                LD C,A                LD A,9                CALL OUT_CA_AYTESTEFF_B:      LD A,(E_TIME_B)                OR A                JP Z,TESTVIB_B                LD A,(E_WAIT_B)                OR A                JP Z,TESTVIB_B                DEC A                LD (E_WAIT_B),A                JP NZ,CHANNEL_C                LD A,(FREQ_B)                LD C,A                LD A,2                CALL OUT_CA_AY                LD A,(FREQ_B+1)                LD C,A                LD A,3                CALL OUT_CA_AY                LD A,(MEMGATE_B)                LD (FLESH_B),A                CALL OUT_FLESHTESTVIB_B:      LD A,(V_DEL_B)                OR A                JP Z,TSTWOB_B                LD A,(V_DEL1_B)                OR A                JP Z,VSTART_B                DEC A                LD (V_DEL1_B),A                JP NZ,TSTWOB_BVSTART_B:       LD HL,(FREQ_B)                LD DE,(V_RATE_B)                LD D,0                LD A,(FLIP1_B)                OR A                JP Z,VIBDOWN_BVIBUP_B:        ADD HL,DE                JP VIBDONE_BVIBDOWN_B:      SBC HL,DEVIBDONE_B:      LD (FREQ_B),HL                LD C,L                LD A,2                CALL OUT_CA_AY                LD C,H                LD A,3                CALL OUT_CA_AYVIBCNT_B:       LD HL,V_LIM1_B                DEC (HL)                JP NZ,TSTPORT_B                LD A,(V_LIM2_B)                OR A                JP Z,TSTPORT_B                ADD A                LD (HL),A                LD A,(FLIP1_B)                CPL                LD (FLIP1_B),A                JP TSTPORT_BTSTWOB_B:       LD A,(W_WAIT_B)                OR A                JP Z,TSTPORT_B                DEC A                LD (W_WAIT_B),A                JP NZ,TSTPORT_B                LD A,(W_DEL1_B)                LD (W_WAIT_B),A                LD A,(W_OFF_B)                LD L,A                LD A,(FLIP1_B)                XOR 255                LD (FLIP1_B),A                LD A,(OLDNOTE_B)                JP Z,WOBDOWN_BWOBUP_B:        ADD L                JP RESOUND_BWOBDOWN_B:      SUB L                PUSH AF                LD A,(W_DEL2_B)                LD (W_WAIT_B),A                POP AF                JP RESOUND_BTSTPORT_B:      LD A,(PORT_B)                OR A                JP Z,CHANNEL_C                LD HL,TARGET_B                LD E,A                LD A,(OLDNOTE_B)                CP (HL)                JP Z,CHANNEL_C                JP C,GO_UP_B                SUB E                CP (HL)                JP NC,RESOUND_B                JP GOTHERE_BGO_UP_B:        ADD E                CP (HL)                JP C,RESOUND_BGOTHERE_B:      LD A,(HL)RESOUND_B:      LD (OLDNOTE_B),A                ADD A                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_B)                LD H,0                ADD HL,DE                LD (FREQ_B),HL                LD C,L                LD A,2                CALL OUT_CA_AY                LD C,H                LD A,3                CALL OUT_CA_AY                CHANNEL_C:      LD A,(STOP_C)                OR A                RET PTSTCNT_C:       LD HL,COUNT_C                DEC (HL)                PUSH AF           ;*                LD A,(ENDIT_C)  ;*                CP (HL)         ;*                LD HL,GATE_C    ;*                JR Z,NOGATE_C   ;*                LD A,(HL)       ;*                OR A            ;*                JP NZ,NOTYET_C  ;*NOGATE_C:       LD A,00100100B                LD (FLESH_C),A                CALL OUT_FLESH    ;*                INC (HL)         ;*NOTYET_C:       DEC (HL)         ;*                POP AF           ;*                JP NZ,START_C                LD BC,(PC_C)DO_C:           LD A,(BC)                INC BC                OR A                JP P,GOTNOTE_CCOMMAND_C:      AND 127                ADD A                LD E,A                LD D,0                LD HL,JUMP_C                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                EX DE,HL                JP (HL)GOTNOTE_C:      LD L,A                LD A,(IGNORE_C)                OR A                JP Z,NOTEOK_C                XOR A                LD (IGNORE_C),A                JP NOTRANS_CNOTEOK_C:       LD A,(TRANS_C)NOTRANS_C:      ADD L                LD L,A                LD A,(PORT_C)                OR A                LD A,L                JP Z,NOPORT_C                LD (TARGET_C),A                LD A,(OLDNOTE_C)NOPORT_C:       LD (OLDNOTE_C),A                ADD A                PUSH BC                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_C)                LD H,0                ADD HL,DE                LD (FREQ_C),HL                LD C,L                LD A,4                CALL OUT_CA_AY                LD C,H                LD A,5                CALL OUT_CA_AY                POP BC                LD A,(LENGTH_C)                OR A                JP NZ,GOTLEN_C                LD A,(BC)                INC BCGOTLEN_C:       LD (COUNT_C),A                LD (PC_C),BC                LD A,(W_DEL1_C)                LD (W_WAIT_C),A                                LD A,(GATERES_C)                LD (GATE_C),A                LD A,(MEMGATE_C)                LD (FLESH_C),A                CALL OUT_FLESH                STARTVIBC:      LD A,(V_DEL_C)                OR A                JP Z,SETFLIP_C                LD (V_DEL1_C),A                LD A,(V_LIM2_C)                LD (V_LIM1_C),A                LD A,(V_DIR_C)SETFLIP_C:      LD (FLIP1_C),ASTARTENVC:      LD A,(A_CONT_C)                OR A                JP Z,STARTEFFC                LD A,(A_CYC_C)                LD (A_STAGE_C),A                OR A                LD A,(A_ATT_C)                JP Z,STARTAT_C                LD A,(A_DEC_C)STARTAT_C:      LD (A_TIME_C),A                LD A,(A_INIT_C)                LD (VOLUME_C),ASTARTEFFC:      LD A,(E_TIME_C)                OR A                JP Z,START_C                LD (E_WAIT_C),A                LD A,(E_BITS_C)                LD (FLESH_C),A                CALL OUT_FLESH                LD A,(E_FREQ_C)                LD C,A                LD A,4                CALL OUT_CA_AY                LD A,(E_FREQ_C+1)                LD C,A                LD A,5                CALL OUT_CA_AY                START_C:        LD A,(A_STAGE_C)                OR A                JP NZ,TESTDEC_C                LD HL,A_TIME_C                DEC (HL)                JP P,ENDADSR_C                LD A,(A_ATT_C)                LD (HL),A                LD HL,VOLUME_C                INC (HL)                LD A,(HL)                CP 15                JP NZ,ENDADSR_C                LD A,1                LD (A_STAGE_C),A                LD A,(A_DEC_C)                LD (A_TIME_C),A                JP ENDADSR_CTESTDEC_C:      CP 1                JP NZ,ENDADSR_C                LD HL,A_TIME_C                DEC (HL)                JP P,ENDADSR_C                LD A,(A_DEC_C)                LD (HL),A                LD A,(VOLUME_C)                LD HL,A_SUS_C                CP (HL)                JP Z,SET_SUS_C                DEC A                LD (VOLUME_C),A                JP P,ENDADSR_CSET_SUS_C:      LD A,2                LD (A_STAGE_C),AENDADSR_C:      LD A,(VOLUME_C)                LD C,A                LD A,10                CALL OUT_CA_AYTESTEFF_C:      LD A,(E_TIME_C)                OR A                JP Z,TESTVIB_C                LD A,(E_WAIT_C)                OR A                JP Z,TESTVIB_C                DEC A                LD (E_WAIT_C),A                RET NZ                LD A,(FREQ_C)                LD C,A                LD A,4                CALL OUT_CA_AY                LD A,(FREQ_C+1)                LD C,A                LD A,5                CALL OUT_CA_AY                LD A,(MEMGATE_C)                LD (FLESH_C),A                CALL OUT_FLESHTESTVIB_C:      LD A,(V_DEL_C)                OR A                JP Z,TSTWOB_C                LD A,(V_DEL1_C)                OR A                JP Z,VSTART_C                DEC A                LD (V_DEL1_C),A                JP NZ,TSTWOB_CVSTART_C:       LD HL,(FREQ_C)                LD DE,(V_RATE_C)                LD D,0                LD A,(FLIP1_C)                OR A                JP Z,VIBDOWN_CVIBUP_C:        ADD HL,DE                JP VIBDONE_CVIBDOWN_C:      SBC HL,DEVIBDONE_C:      LD (FREQ_C),HL                LD C,L                LD A,4                CALL OUT_CA_AY                LD C,H                LD A,5                CALL OUT_CA_AYVIBCNT_C:       LD HL,V_LIM1_C                DEC (HL)                JP NZ,TSTPORT_C                LD A,(V_LIM2_C)                OR A                JP Z,TSTPORT_C                ADD A                LD (HL),A                LD A,(FLIP1_C)                CPL                LD (FLIP1_C),A                JP TSTPORT_CTSTWOB_C:       LD A,(W_WAIT_C)                OR A                JP Z,TSTPORT_C                DEC A                LD (W_WAIT_C),A                JP NZ,TSTPORT_C                LD A,(W_DEL1_C)                LD (W_WAIT_C),A                LD A,(W_OFF_C)                LD L,A                LD A,(FLIP1_C)                XOR 255                LD (FLIP1_C),A                LD A,(OLDNOTE_C)                JP Z,WOBDOWN_CWOBUP_C:        ADD L                JP RESOUND_CWOBDOWN_C:      SUB L                PUSH AF                LD A,(W_DEL2_C)                LD (W_WAIT_C),A                POP AF                JP RESOUND_CTSTPORT_C:      LD A,(PORT_C)                OR A                RET Z                LD HL,TARGET_C                LD E,A                LD A,(OLDNOTE_C)                CP (HL)                RET Z                JP C,GO_UP_C                SUB E                CP (HL)                JP NC,RESOUND_C                JP GOTHERE_CGO_UP_C:        ADD E                CP (HL)                JP C,RESOUND_CGOTHERE_C:      LD A,(HL)RESOUND_C:      LD (OLDNOTE_C),A                ADD A                LD E,A                LD D,0                LD HL,NOTES                ADD HL,DE                LD E,(HL)                INC HL                LD D,(HL)                LD HL,(DISTORT_C)                LD H,0                ADD HL,DE                LD (FREQ_C),HL                LD C,L                LD A,4                CALL OUT_CA_AY                LD C,H                LD A,5                JP OUT_CA_AYEXIT:           RET                OUT_FLESH:                      LD A,(FLESH_A)                AND 00001001B                LD C,A                LD A,(FLESH_B)                AND 00010010B                LD B,A                LD A,(FLESH_C)                AND 00100100B                OR C                OR B                LD C,A                LD A,7                JP OUT_CA_AY                                                                PUSH HL                LD HL,FLESH_A                LD A,(HL)                INC HL                OR (HL)                INC HL                OR (HL)                POP HL                LD C,A                LD A,7                JP OUT_CA_AY;--------------------------------------                JUMP_A:         DW A_FOR                DW A_NEXT                DW A_LENGTH                DW A_STOP                DW A_GOSUB                DW A_RETURN                DW A_TRANS                DW A_DISTORT                DW A_SEND                DW A_ADSR                DW A_ENVON                DW A_WOBBLE                DW A_PORT                DW A_VIBRATO                DW A_IGNORE                DW A_EFFECT                DW A_GOTO                DW A_GATECON                DW A_ENDIT                ;--------------------------------------                A_FOR:          LD A,(BC)                LD (REPEAT_A),A                INC BC                LD (LOOP_A),BC                JP DO_A                A_NEXT:         LD HL,REPEAT_A                DEC (HL)                JP Z,DO_A                LD BC,(LOOP_A)                JP DO_A                A_LENGTH:       LD A,(BC)                LD (LENGTH_A),A                INC BC                JP DO_A                A_STOP:         LD HL,STOP_A                INC (HL)                JP CHANNEL_B                A_GOTO:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                PUSH HL                POP BC                JP DO_A                A_GOSUB:        LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                INC BC                PUSH HL                LD HL,(SP_A)                LD (HL),C                INC HL                LD (HL),B                INC HL                LD (SP_A),HL                POP BC                JP DO_A                A_RETURN:       LD HL,(SP_A)                DEC HL                LD B,(HL)                DEC HL                LD C,(HL)                LD (SP_A),HL                JP DO_A                SP_A:           DW 0STACK_A:        DS 2*SD,0                A_TRANS:        LD A,(BC)                LD (TRANS_A),A                INC BC                JP DO_A                A_DISTORT:      LD A,(BC)                LD (DISTORT_A),A                INC BC                JP DO_A                A_SEND:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                INC BC                PUSH BC                LD C,A                LD A,L                CP 7                JP NZ,A_NOT_IO                LD A,C                LD (FLESH_A),A                LD (MEMGATE_A),A                CALL OUT_FLESH                POP BC                JP DO_AA_NOT_IO:       CALL OUT_CA_AY                POP BC                JP DO_A                A_ADSR:         LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_INIT_A),A                LD A,(BC)                AND 15                LD (A_SUS_A),A                INC BC                LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_ATT_A),A                LD A,(BC)                AND 15                LD (A_DEC_A),A                INC BC                LD A,(BC)                LD (A_CYC_A),A                INC BC                JP DO_A                A_ENVON:        LD A,(BC)                LD (A_CONT_A),A                INC BC                JP DO_A                A_WOBBLE:       LD A,(BC)                LD (W_OFF_A),A                INC BC                LD A,(BC)                LD (W_DEL1_A),A                INC BC                LD A,(BC)                LD (W_DEL2_A),A                INC BC                JP DO_A                A_PORT:         LD A,(BC)                LD (PORT_A),A                INC BC                JP DO_A                A_VIBRATO:      LD A,(BC)                LD (V_DEL_A),A                INC BC                LD A,(BC)                LD (V_RATE_A),A                INC BC                LD A,(BC)                LD (V_LIM2_A),A                INC BC                LD A,(BC)                LD (V_DIR_A),A                INC BC                JP DO_A                A_IGNORE:       LD A,255                LD (IGNORE_A),A                JP DO_A                A_EFFECT:       LD A,(BC)                OR A                JR Z,A_EFF2                INC AA_EFF2:         LD (E_TIME_A),A                INC BC; OR   A; JP   NZ,A_SETEFF; LD   A,(REGISTER); AND  00001001B; LD   E,A; LD   A,(REGISTER2); AND  00110110B; OR   E; LD   (REGISTER2),A; PUSH BC; LD   C,A; LD   A,7; CALL OUT_CA_AY; POP  BC; JP   DO_BA_SETEFF:       LD A,(BC)                LD (E_BITS_A),A                INC BC                LD A,(BC)                LD (E_FREQ_A),A                INC BC                LD A,(BC)                LD (E_FREQ_A+1),A                INC BC                JP DO_A                A_ENDIT:        LD A,(BC)                LD (ENDIT_A),A                INC BC                JP DO_A                A_GATECON:      LD A,(BC)                LD (GATERES_A),A                INC BC                JP DO_A;--------------------------------------                JUMP_B:         DW B_FOR                DW B_NEXT                DW B_LENGTH                DW B_STOP                DW B_GOSUB                DW B_RETURN                DW B_TRANS                DW B_DISTORT                DW B_SEND                DW B_ADSR                DW B_ENVON                DW B_WOBBLE                DW B_PORT                DW B_VIBRATO                DW B_IGNORE                DW B_EFFECT                DW B_GOTO                DW B_GATECON                DW B_ENDIT                ;--------------------------------------                B_FOR:          LD A,(BC)                LD (REPEAT_B),A                INC BC                LD (LOOP_B),BC                JP DO_B                B_NEXT:         LD HL,REPEAT_B                DEC (HL)                JP Z,DO_B                LD BC,(LOOP_B)                JP DO_B                B_LENGTH:       LD A,(BC)                LD (LENGTH_B),A                INC BC                JP DO_B                B_STOP:         LD HL,STOP_B                INC (HL)                JP CHANNEL_C                B_GOTO:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                PUSH HL                POP BC                JP DO_B                B_GOSUB:        LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                INC BC                PUSH HL                LD HL,(SP_B)                LD (HL),C                INC HL                LD (HL),B                INC HL                LD (SP_B),HL                POP BC                JP DO_B                B_RETURN:       LD HL,(SP_B)                DEC HL                LD B,(HL)                DEC HL                LD C,(HL)                LD (SP_B),HL                JP DO_B                SP_B:           DW 0STACK_B:        DS 2*SD,0                B_TRANS:        LD A,(BC)                LD (TRANS_B),A                INC BC                JP DO_B                B_DISTORT:      LD A,(BC)                LD (DISTORT_B),A                INC BC                JP DO_B                B_SEND:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                INC BC                PUSH BC                LD C,A                LD A,L                CP 7                JP NZ,B_NOT_IO                LD A,C                LD (FLESH_B),A                LD (MEMGATE_B),A                CALL OUT_FLESH                POP BC                JP DO_BB_NOT_IO:       CALL OUT_CA_AY                POP BC                JP DO_B                B_ADSR:         LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_INIT_B),A                LD A,(BC)                AND 15                LD (A_SUS_B),A                INC BC                LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_ATT_B),A                LD A,(BC)                AND 15                LD (A_DEC_B),A                INC BC                LD A,(BC)                LD (A_CYC_B),A                INC BC                JP DO_B                B_ENVON:        LD A,(BC)                LD (A_CONT_B),A                INC BC                JP DO_B                B_WOBBLE:       LD A,(BC)                LD (W_OFF_B),A                INC BC                LD A,(BC)                LD (W_DEL1_B),A                INC BC                LD A,(BC)                LD (W_DEL2_B),A                INC BC                JP DO_B                B_PORT:         LD A,(BC)                LD (PORT_B),A                INC BC                JP DO_B                B_VIBRATO:      LD A,(BC)                LD (V_DEL_B),A                INC BC                LD A,(BC)                LD (V_RATE_B),A                INC BC                LD A,(BC)                LD (V_LIM2_B),A                INC BC                LD A,(BC)                LD (V_DIR_B),A                INC BC                JP DO_B                B_IGNORE:       LD A,255                LD (IGNORE_B),A                JP DO_B                B_EFFECT:       LD A,(BC)                OR A                JR Z,B_EFF2                INC AB_EFF2:         LD (E_TIME_B),A                INC BC;    OR   A;    JP   NZ,B_SETEFF;    PUSH BC;    LD   A,(MEMGATE_B);    LD   (FLESH_B),A;    CALL OUT_FLESH;    POP  BC;    JP   DO_BB_SETEFF:       LD A,(BC)                LD (E_BITS_B),A                INC BC                LD A,(BC)                LD (E_FREQ_B),A                INC BC                LD A,(BC)                LD (E_FREQ_B+1),A                INC BC                JP DO_B                B_ENDIT:        LD A,(BC)                LD (ENDIT_B),A                INC BC                JP DO_B                B_GATECON:      LD A,(BC)                LD (GATERES_B),A                INC BC                JP DO_B                ;--------------------------------------JUMP_C:         DW C_FOR                DW C_NEXT                DW C_LENGTH                DW C_STOP                DW C_GOSUB                DW C_RETURN                DW C_TRANS                DW C_DISTORT                DW C_SEND                DW C_ADSR                DW C_ENVON                DW C_WOBBLE                DW C_PORT                DW C_VIBRATO                DW C_IGNORE                DW C_EFFECT                DW C_GOTO                DW C_GATECON                DW C_ENDIT                ;--------------------------------------                C_FOR:          LD A,(BC)                LD (REPEAT_C),A                INC BC                LD (LOOP_C),BC                JP DO_C                C_NEXT:         LD HL,REPEAT_C                DEC (HL)                JP Z,DO_C                LD BC,(LOOP_C)                JP DO_C                C_LENGTH:       LD A,(BC)                LD (LENGTH_C),A                INC BC                JP DO_C                C_STOP:         LD HL,STOP_C                INC (HL)                RET                C_GOTO:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                PUSH HL                POP BC                JP DO_C                C_GOSUB:        LD A,(BC)                LD L,A                INC BC                LD A,(BC)                LD H,A                INC BC                PUSH HL                LD HL,(SP_C)                LD (HL),C                INC HL                LD (HL),B                INC HL                LD (SP_C),HL                POP BC                JP DO_C                C_RETURN:       LD HL,(SP_C)                DEC HL                LD B,(HL)                DEC HL                LD C,(HL)                LD (SP_C),HL                JP DO_C                SP_C:           DW 0STACK_C:        DS 2*SD,0                C_TRANS:        LD A,(BC)                LD (TRANS_C),A                INC BC                JP DO_C                C_DISTORT:      LD A,(BC)                LD (DISTORT_C),A                INC BC                JP DO_C                C_SEND:         LD A,(BC)                LD L,A                INC BC                LD A,(BC)                INC BC                PUSH BC                LD C,A                LD A,L                CP 7                JP NZ,C_NOT_IO                LD A,C                LD (FLESH_C),A                LD (MEMGATE_C),A                CALL OUT_FLESH                POP BC                JP DO_CC_NOT_IO:       CALL OUT_CA_AY                POP BC                JP DO_C                C_ADSR:         LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_INIT_C),A                LD A,(BC)                AND 15                LD (A_SUS_C),A                INC BC                LD A,(BC)                RRA                RRA                RRA                RRA                AND 15                LD (A_ATT_C),A                LD A,(BC)                AND 15                LD (A_DEC_C),A                INC BC                LD A,(BC)                LD (A_CYC_C),A                INC BC                JP DO_C                C_ENVON:        LD A,(BC)                LD (A_CONT_C),A                INC BC                JP DO_C                C_WOBBLE:       LD A,(BC)                LD (W_OFF_C),A                INC BC                LD A,(BC)                LD (W_DEL1_C),A                INC BC                LD A,(BC)                LD (W_DEL2_C),A                INC BC                JP DO_C                C_PORT:         LD A,(BC)                LD (PORT_C),A                INC BC                JP DO_C                C_VIBRATO:      LD A,(BC)                LD (V_DEL_C),A                INC BC                LD A,(BC)                LD (V_RATE_C),A                INC BC                LD A,(BC)                LD (V_LIM2_C),A                INC BC                LD A,(BC)                LD (V_DIR_C),A                INC BC                JP DO_C                C_IGNORE:       LD A,255                LD (IGNORE_C),A                JP DO_C                C_EFFECT:       LD A,(BC)                OR A                JR Z,C_EFF2                INC AC_EFF2:         LD (E_TIME_C),A                INC BC; OR   A; JP   NZ,C_SETEFF; LD   A,(REGISTER); AND  00100100B; LD   E,A; LD   A,(REGISTER2); AND  00011011B; OR   E; LD   (REGISTER2),A; PUSH BC; LD   C,A; LD   A,7; CALL OUT_CA_AY; POP  BC; JP   DO_CC_SETEFF:       LD A,(BC)                LD (E_BITS_C),A                INC BC                LD A,(BC)                LD (E_FREQ_C),A                INC BC                LD A,(BC)                LD (E_FREQ_C+1),A                INC BC                JP DO_C                C_ENDIT:        LD A,(BC)                LD (ENDIT_C),A                INC BC                JP DO_C                C_GATECON:      LD A,(BC)                LD (GATERES_C),A                INC BC                JP DO_C                ;--------------------------------------; This routine will send the contents; of C to the AY register pointed to; by A.                OUT_CA_AY:      ;Speccy                LD E,C                LD BC,65533                OUT (C),A                LD BC,49149                LD A,E                OUT (C),A                RET;Amstrad;    LD   B,0F4H;    OUT  (C),A;    LD   B,0F6H;    IN   A,(C);    OR   0C0H;    OUT  (C),A;    AND  03FH;    OUT  (C),A;    LD   B,0F4H;    OUT  (C),C;    LD   B,0F6H;    LD   C,A;    OR   080H;    OUT  (C),A;    OUT  (C),C;    RET                ;--------------------------------------NOTES:                          DW 0,0,0,0,0,0                DW 0EEEH,0E18H,0D4DH                DW 0EEEH,0E18H,0D4DH                DW 0C8EH,0BDAH                DW 0B2FH,0A8FH,09F7H                DW 0968H,08E1H                DW 0861H,07E9H,0777H                DW 070CH,06A7H                DW 0647H,05EDH,0598H                DW 0547H,04FCH                DW 04B4H,0470H,0431H                DW 03F4H,03BCH                DW 0386H,0353H,0324H                DW 02F6H,02CCH                DW 02A4H,027EH,025AH                DW 0238H,0218H                DW 01FAH,01DEH,01C3H                DW 01AAH,0192H                DW 017BH,0166H,0152H                DW 013FH,012DH                DW 011CH,010CH,00FDH                DW 00EFH,00E1H                DW 0D5H,0C9H,0BEH,0B3H,0A9H                DW 09FH,096H,08EH,086H,07FH                DW 077H,071H,06AH,064H,05FH                DW 059H,054H,050H,04BH,047H                DW 043H,03FH,03CH,038H,035H                DW 032H,02FH,02DH,02AH,028H                DW 026H,024H,022H,020H,01EH                DW 01CH,01BH,019H,018H,016H                DW 015H,014H,013H,012H,011H                DW 010H,010H,010H,010H,010H                CODE_BOT:                       CALC1:          EQU CODE_BOT-CODE_TOP;--------------------------------------CALC2:          EQU 50000                Tunes:          EQU 50002Effects:        EQU 50003                TUNES_A:        EQU 50004TUNES_B:        EQU 50024TUNES_C:        EQU 50044                FX_TAB:         EQU 50064                                END